/**
 * style.css
 *
 * Frontend styles for the Flatsome Product Gallery Video plugin.
 * This file provides the necessary styling for the video thumbnail
 * overlay and the responsive lightbox implementation.
 *
 * This version is compatible with the manual lightbox initialization
 * handled by `frontend.js` (v2.0.0+).
 *
 * @version 2.0.0
 * @author  Expert Analyst
 */

/* ==========================================================================
   1. Video Thumbnail Play Icon
   ========================================================================== */

/**
 * The anchor tag (`<a>`) wrapping the video thumbnail image.
 *
 * - `position: relative`: This is crucial for creating a positioning context
 *   for the `::after` pseudo-element, which serves as our play icon overlay.
 * - `display: block`: Ensures the anchor tag fills its container, making the
 *   entire thumbnail area clickable and allowing the overlay to cover it completely.
 */
.woocommerce-product-gallery__image a.fvg-video-thumbnail {
    position: relative;
    display: block;
    cursor: pointer;
}

/**
 * The play icon overlay, created using a pseudo-element. This approach avoids
 * adding extra HTML markup.
 *
 * - `content`: Must be present for the pseudo-element to render.
 * - `position: absolute`: Positions the overlay relative to the `a.fvg-video-thumbnail`.
 * - `top, left, transform`: A standard technique to perfectly center the element.
 * - `background-color`: A semi-transparent circle creates a backdrop for the icon.
 * - `background-image`: An inline, URL-encoded SVG is used for the play triangle.
 *   This is a modern, scalable, and self-contained method.
 * - `border-radius: 50%`: Makes the overlay a circle.
 * - `transition`: Provides a smooth animation for hover effects.
 * - `pointer-events: none`: Ensures the overlay does not interfere with click events
 *   on the underlying anchor tag.
 */
.woocommerce-product-gallery__image a.fvg-video-thumbnail::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 10;
    width: 64px;
    height: 64px;
    background-color: rgba(0, 0, 0, 0.55);
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='white'%3E%3Cpath d='M8 5v14l11-7z'/%3E%3C/svg%3E");
    background-position: center;
    background-repeat: no-repeat;
    background-size: 32px 32px;
    border-radius: 50%;
    transition: background-color 0.3s ease, transform 0.3s ease;
    pointer-events: none;
}

/**
 * A subtle hover effect to provide visual feedback to the user.
 * The overlay becomes slightly darker and larger.
 */
.woocommerce-product-gallery__image a.fvg-video-thumbnail:hover::after {
    background-color: rgba(0, 0, 0, 0.7);
    transform: translate(-50%, -50%) scale(1.1);
}


/* ==========================================================================
   2. Responsive Lightbox Styling (Auto-Resize Feature)
   ========================================================================== */

/**
 * This entire section applies ONLY when the 'auto-resize' option is enabled.
 * The `frontend.js` script adds the `.fvg-lightbox-auto-resize` class to the
 * main `.mfp-wrap` element, which we use as our primary selector.
 */

/**
 * Style the main content area of the lightbox for optimal video presentation.
 *
 * - `display: flex`: Enables flexbox layout for easy centering.
 * - `align-items` & `justify-content`: Vertically and horizontally centers the
 *   video container (`.mfp-iframe-scaler`) within the lightbox viewport.
 * - `padding`: Adds breathing room around the video, preventing it from
 *   touching the screen edges, especially on mobile devices.
 */
.mfp-wrap.fvg-lightbox-auto-resize .mfp-content {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 20px;
    box-sizing: border-box;
}

/**
 * This is the core of the responsive video player, implementing the classic
 * "aspect-ratio box" or "padding-top hack". This targets the custom
 * `.mfp-iframe-scaler` div injected by our JavaScript.
 *
 * - `width: 100%`: The scaler will fill the available width of the `.mfp-content` container.
 * - `max-width`: Sets a sensible limit for the video size on very large desktop screens.
 * - `position: relative`: Creates a positioning context for the child `iframe`.
 * - `height: 0`: The element itself has no height.
 * - `padding-top: 56.25%`: This is the crucial property. The top padding, as a
 *   percentage, is calculated based on the element's width. A value of 56.25%
 *   (which is 9 / 16) creates a perfect 16:9 aspect ratio box.
 */
.mfp-wrap.fvg-lightbox-auto-resize .mfp-iframe-scaler {
    width: 100%;
    max-width: 1200px;
    position: relative;
    height: 0;
    padding-top: 56.25%; /* 16:9 Aspect Ratio */
    margin: 0 auto; /* Ensures centering if max-width is reached */
}

/**
 * Styles the `iframe` element to fill the responsive container we just created.
 *
 * - `position: absolute`: Positions the iframe relative to the `.mfp-iframe-scaler`.
 * - `top`, `left`, `width`, `height`: Stretches the iframe to fill the entire
 *   scaler, forcing it to conform to the aspect ratio defined by the parent's padding.
 */
.mfp-wrap.fvg-lightbox-auto-resize .mfp-iframe-scaler iframe {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: 0; /* Removes default browser borders from iframes */
}
